pipeline {
    agent any
    stages {
        stage('Test Cloning Files') {
            steps {
                sh ' ls | grep distribution'
                sh ' ls | grep jenkins'
            }  
        }
        stage('Check and Install Docker') {
            steps {
                script {
                    def dockerCommand = "docker --version"
                    def dockerInstalled = sh(script: dockerCommand, returnStatus: true) == 0

                    if (!dockerInstalled) {
                        echo "Docker is not installed. Installing..."
                        sh 'curl -fsSL https://get.docker.com -o get-docker.sh'
                        sh 'sh get-docker.sh'
                        def currentUserName = sh(script: 'whoami', returnStdout: true).trim()
                        sh "sudo usermod -aG docker ${currentUserName}"
                    } else {
                        echo "Docker is already installed."
                    }
                }
            }
        }

         stage('Check and Install Docker Compose') {
            steps {
                script {
                    def dockerComposeCommand = "docker-compose --version"
                    def dockerComposeInstalled = sh(script: dockerComposeCommand, returnStatus: true) == 0
                    if (!dockerComposeInstalled) {
                        echo "Docker Compose is not installed. Installing..."
                        sh 'curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose'
                        sh 'chmod +x /usr/local/bin/docker-compose'
                    } else {
                        echo "Docker Compose is already installed."
                    }
                }
            }
        }
        
        stage('Docker Compose buid ') {
            steps {
                sh 'pwd'
                sh 'docker-compose -f distribution/docker-compose.yml up -d'
            }
        }
        stage('Build Docker compose Containers - PhpMyAdmin') {
            agent any
            steps {
                sh "docker inspect -f '{{json .State.Running}}' distribution_phpmyadmin_1 | grep true"
                sh "docker inspect -f '{{json .State.Running}}' distribution_mysql-db_1 | grep true"
            }
        }
        
         stage('Check and Install Maven') {
            steps {
                script {
                    def mvnCommand = "mvn -v"
                    def mvnInstalled = sh(script: mvnCommand, returnStatus: true) == 0
                    if (!mvnInstalled) {
                        echo "Maven is not installed. Installing..."
                         // Télécharger Maven 3.9.6
                        sh 'curl -O https://dlcdn.apache.org/maven/maven-3/3.9.6/source/apache-maven-3.9.6-src.tar.gz'
    
                        // Extraire l'archive
                        sh 'tar xf apache-maven-3.9.6-bin.tar.gz'
    
                        // Ajouter Maven à la variable d'environnement PATH
                        env.PATH = "${env.WORKSPACE}/apache-maven-3.9.6/bin:${env.PATH}"
                        
                    } else {
                        echo "Maven is already installed."
                    }
                }
            }
        }
        
        stage('Test Distribution project') {
            steps {
                sh 'cd distribution && mvn test'
            }
        }
    }
}
