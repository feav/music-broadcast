pipeline {
    agent any
    environment {
        DOCKERHUB_CREDENTIALS = credentials('docker_access')
        ANSIBLE_VPS_CREDENTIALS = credentials('client_vps_access')
    }
    stages {
        stage('Test Cloning Files') {
            steps {
                sh 'ls | grep distribution'
                sh 'ls | grep jenkins'
            }
        }
        stage('Check and Install Tools (docker, docker-compose, mvn)') {
            steps {
                script {
                    def installDocker = {
                        echo "Docker is not installed. Installing..."
                        sh 'curl -fsSL https://get.docker.com -o get-docker.sh'
                        sh 'sh get-docker.sh'
                        def currentUserName = sh(script: 'whoami', returnStdout: true).trim()
                        sh "sudo usermod -aG docker ${currentUserName}"
                    }

                    def installDockerCompose = {
                        echo "Docker Compose is not installed. Installing..."
                        sh 'curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose'
                        sh 'chmod +x /usr/local/bin/docker-compose'
                    }

                    def installMaven = {
                        echo "Maven is not installed. Installing..."
                        sh 'apt update'
                        sh 'apt install maven -y'
                        sh 'mvn -v'
                    }

                    def installAnsible = {
                        echo "Ansible is not installed. Installing..."
                        sh 'apt update'
                        sh 'apt install ansible -y'
                        sh 'apt-get install sshpass'
                        sh 'ansible --version'
                    }

                    if (sh(script: 'docker --version', returnStatus: true) != 0) {
                        installDocker()
                    } else {
                        echo "Docker is already installed."
                    }

                    if (sh(script: 'docker-compose --version', returnStatus: true) != 0) {
                        installDockerCompose()
                    } else {
                        echo "Docker Compose is already installed."
                    }

                    if (sh(script: 'mvn -v', returnStatus: true) != 0) {
                        installMaven()
                    } else {
                        echo "Maven is already installed."
                    }

                    if (sh(script: 'ansible --version', returnStatus: true) != 0) {
                        installAnsible()
                    } else {
                        echo "Ansible is already installed."
                    }
                }
            }
        }
     
        stage('Deploy on VPS with Ansible') {
            steps {
                script {
                    // Utilisation de credentials pour la commande ping
                    withCredentials([usernamePassword(credentialsId: 'client_vps_access', passwordVariable: 'ANSIBLE_VPS_CREDENTIALS_PSD', usernameVariable: 'ANSIBLE_VPS_CREDENTIALS_USR')]) {
                        sh 'ansible -i ansible/hosts.yml all -m ping'
                    }
                
                    // Utilisation de credentials pour la playbook deploy.yml
                    withCredentials([usernamePassword(credentialsId: 'client_vps_access', passwordVariable: 'ANSIBLE_VPS_CREDENTIALS_PSD', usernameVariable: 'ANSIBLE_VPS_CREDENTIALS_USR')]) {
                        sh 'ansible-playbook -i ansible/hosts.yml ansible/deploy.yml'
                    }

                }

            }
        }

    }
}
