pipeline {
    agent any
    environment {
        DOCKERHUB_CREDENTIALS = credentials('docker_access')
        ANSIBLE_VPS_CREDENTIALS = credentials('client_vps_access')
    }
    stages {
        stage('Test Cloning Files') {
            steps {
                sh 'ls | grep distribution'
                sh 'ls | grep jenkins'
            }
        }
        stage('Check and Install Tools (docker, docker-compose, mvn)') {
            steps {
                script {
                    def installDocker = {
                        echo "Docker is not installed. Installing..."
                        sh 'curl -fsSL https://get.docker.com -o get-docker.sh'
                        sh 'sh get-docker.sh'
                        def currentUserName = sh(script: 'whoami', returnStdout: true).trim()
                        sh "sudo usermod -aG docker ${currentUserName}"
                    }

                    def installDockerCompose = {
                        echo "Docker Compose is not installed. Installing..."
                        sh 'curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose'
                        sh 'chmod +x /usr/local/bin/docker-compose'
                    }

                    def installMaven = {
                        echo "Maven is not installed. Installing..."
                        sh 'apt update'
                        sh 'apt install maven -y'
                        sh 'mvn -v'
                    }

                    def installAnsible = {
                        echo "Ansible is not installed. Installing..."
                        sh 'apt update'
                        sh 'apt install ansible -y'
                        sh 'ansible --version'
                    }

                    if (sh(script: 'docker --version', returnStatus: true) != 0) {
                        installDocker()
                    } else {
                        echo "Docker is already installed."
                    }

                    if (sh(script: 'docker-compose --version', returnStatus: true) != 0) {
                        installDockerCompose()
                    } else {
                        echo "Docker Compose is already installed."
                    }

                    if (sh(script: 'mvn -v', returnStatus: true) != 0) {
                        installMaven()
                    } else {
                        echo "Maven is already installed."
                    }

                    if (sh(script: 'ansible --version', returnStatus: true) != 0) {
                        installAnsible()
                    } else {
                        echo "Ansible is already installed."
                    }
                }
            }
        }
        stage('Test Docker Compose Containers') {
            steps {
                //sh 'docker-compose -f distribution/docker-compose-prod.yml up -d'
                //sh 'sleep 5'
                //sh 'docker ps'
                //sh 'docker-compose -f distribution/docker-compose-prod.yml down -d'
            }
        }
        stage('Test Distribution project') {
            steps {
                //sh 'cd distribution && mvn test -Ptest'
            }
        }
        stage('Build Art√©fact Maven') {
            steps {
                //sh 'rm -R distribution/target/*.jar'
                //sh 'cd distribution && mvn verify -Pprod'
                //sh 'cp distribution/target/*.jar distribution/target/distribution-latest.jar'
                //sh 'ls distribution/target/'
                //sh 'ls ./'
            }
        }
        stage('Deploy on Docker Hub') {
            steps {
                //sh 'docker build --tag feavfeav/distribution-music ./distribution/'
                //sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
                //sh 'docker push feavfeav/distribution-music:latest'
            }
        }
        stage('Deploy on VPS with Ansible') {
            steps {
                script {
                    sh "ansible -i ansible/hosts all -m ping"
                    sh 'ansible-playbook -i ansible/hosts ansible/deploy.yml'
                }
            }
        }

    }
}
